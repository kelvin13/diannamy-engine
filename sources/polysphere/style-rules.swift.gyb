extension UI.Style 
{
    struct FontSelection:Hashable, CustomStringConvertible
    {
        let fontfile:String, 
            size:Int 
        
        var description:String 
        {
            return "'\(self.fontfile)'@\(self.size)"
        }
    }
    
    enum Feature:Equatable, CustomStringConvertible
    {
        %{
        features = (
            ('kern', 'Bool'), 
            ('calt', 'Bool'), 
            ('liga', 'Bool'), 
            ('hlig', 'Bool'), 
            ('case', 'Bool'), 
            ('cpsp', 'Bool'), 
            ('smcp', 'Bool'), 
            ('pcap', 'Bool'), 
            ('c2sc', 'Bool'), 
            ('c2pc', 'Bool'), 
            ('unic', 'Bool'), 
            ('ordn', 'Bool'), 
            ('zero', 'Bool'), 
            ('frac', 'Bool'), 
            ('afrc', 'Bool'), 
            ('sinf', 'Bool'), 
            ('subs', 'Bool'), 
            ('sups', 'Bool'), 
            ('ital', 'Bool'), 
            ('mgrk', 'Bool'), 
            ('lnum', 'Bool'), 
            ('onum', 'Bool'), 
            ('pnum', 'Bool'), 
            ('tnum', 'Bool'), 
            ('rand', 'Bool'), 
            ('salt', 'Int'), 
            ('swsh', 'Int'), 
            ('titl', 'Bool')
        )
        }%
        
        % for name, T in features:
            case `${name}`(${T})
        % end
        
        var value:Int 
        {
            switch self 
            {
            case ${', '.join('.`{0}`(let on)'.format(name) for name, T in features if T == 'Bool')}:
                return on ? 1 : 0
            
            case ${', '.join('.`{0}`(let value)'.format(name) for name, T in features if T == 'Int')}:
                return value
            }
        }
        
        var tag:UInt32
        {
            let characters:(UInt8, UInt8, UInt8, UInt8)
            switch self 
            {
            % for name, T in features:
            case .`${name}`:
                characters = (${', '.join(map(str, map(ord, name)))})
            % end 
            }
            
            return  .init(characters.0) << 24 | 
                    .init(characters.1) << 16 | 
                    .init(characters.2) << 8  | 
                    .init(characters.3)
        }
        
        init?(string:String, value:Int) 
        {
            switch string 
            {
            % for name, T in features:
            case ${'"{0}"'.format(name)}:
                % if T == 'Bool':
                self = .${name}(value == 0 ? false : true)
                % elif T == 'Int':
                self = .${name}(value)
                % end 
            % end
            
            default:
                return nil 
            }
        }
        
        var description:String 
        {
            switch self
            {
            % for name, T in features:
            case .${name}(let value):
                return ${'"{0}(\\(value))"'.format(name)}
            % end
            }
        }
    }
    
    struct Metrics<T>:Equatable
        where T:Equatable
    {
        var top:T, 
            right:T, 
            bottom:T, 
            left:T 
        
        init(top:T, right:T, bottom:T, left:T) 
        {
            self.top    = top 
            self.right  = right 
            self.bottom = bottom 
            self.left   = left
        }
        
        init(top:T, horizontal:T, bottom:T) 
        {
            self.init(top: top, right: horizontal, bottom: bottom, left: horizontal)
        }
        
        init(vertical:T, horizontal:T) 
        {
            self.init(top: vertical, right: horizontal, bottom: vertical, left: horizontal)
        }
        
        init(_ width:T) 
        {
            self.init(top: width, right: width, bottom: width, left: width)
        }
    }
    
    enum Positioning:Sheet.Enumeration
    {
        case relative, absolute 
        
        static 
        var type:Sheet.Parse.Expression.Keyword 
        {
            .positioning
        }
        
        init?(string:String) 
        {
            switch string 
            {
            case "relative":
                self = .relative 
            case "absolute":
                self = .absolute
            default:
                return nil 
            }
        }
    }
    
    enum Justification:Sheet.Enumeration
    {
        case start, center, end, spaceBetween, spaceAround, spaceEvenly
        
        static 
        var type:Sheet.Parse.Expression.Keyword 
        {
            .justification
        }
        
        init?(string:String) 
        {
            switch string 
            {
            case "start":
                self = .start 
            case "center":
                self = .center
            case "end":
                self = .end 
            case "space-between":
                self = .spaceBetween 
            case "space-around":
                self = .spaceAround
            case "space-evenly":
                self = .spaceEvenly 
            default:
                return nil 
            }
        }
    }
    enum Alignment:Sheet.Enumeration
    {
        case start, center, end, auto
        
        static 
        var type:Sheet.Parse.Expression.Keyword 
        {
            .alignment
        }
        
        init?(string:String) 
        {
            switch string 
            {
            case "start":
                self = .start 
            case "center":
                self = .center
            case "end":
                self = .end 
            case "auto":
                self = .auto 
            default:
                return nil 
            }
        }
    }
    
    enum Axis:Sheet.Enumeration
    {
        case horizontal, vertical 
        
        static 
        var type:Sheet.Parse.Expression.Keyword 
        {
            .axis 
        }
        
        init?(string:String) 
        {
            switch string 
            {
            case "horizontal":
                self = .horizontal 
            case "vertical":
                self = .vertical
            default:
                return nil 
            }
        }
        
        var main:Self 
        {
            self 
        }
        var cross:Self 
        {
            switch self 
            {
            case .horizontal:
                return .vertical
            case .vertical:
                return .horizontal
            }
        }
        
        func unpack<T>(_ metrics:Metrics<T>) 
            -> ((main:T, cross:T), (main:T, cross:T))
            where T:Equatable
        {
            switch self 
            {
            case .horizontal:
                return ((metrics.left, metrics.top), (metrics.right, metrics.bottom))
            case .vertical:
                return ((metrics.top, metrics.left), (metrics.bottom, metrics.right))
            }
        }
        
        func unpack<T>(_ vector:Vector2<T>) -> (main:T, cross:T)
            where T:SIMDScalar 
        {
            switch self 
            {
            case .horizontal:
                return (vector.x, vector.y)
            case .vertical:
                return (vector.y, vector.x)
            }
        }
        
        func pack<T>(_ axes:(main:T, cross:T)) -> Vector2<T> where T:SIMDScalar 
        {
            switch self 
            {
            case .horizontal:
                return .init(axes.main, axes.cross)
            case .vertical:
                return .init(axes.cross, axes.main)
            }
        }
        
        func repack<T>(_ axes:(main:T, cross:T), as axis:Self) -> (main:T, cross:T) where T:SIMDScalar 
        {
            switch (self, axis) 
            {
            case (.horizontal, .vertical), (.vertical, .horizontal):
                return (axes.cross, axes.main)
            case (.horizontal, .horizontal), (.vertical, .vertical):
                return axes
            }
        }
    }
    
    %{
    def css_name(swift_name):
        return ''.join(c if c.islower() else '-{0}'.format(c.lower()) for c in swift_name)
    
    properties = (
        ('color',           'text color',           'Vector4<UInt8>',   '.init(0, 0, 0, .max)'), 
        ('backgroundColor', 'background color',     'Vector4<UInt8>',   '.init(0, 0, 0, 0)'), 
        ('borderColor',     'border color',         'Vector4<UInt8>',   '.init(0, 0, 0, .max)'), 
        ('trace',           '3D tracing center',    'Vector3<Float>',   '.init(.nan, .nan, .nan)'), 
        ('offset',          '2D offset',            'Vector2<Float>',   '.init(0, 0)'), 
        
        ('padding',         'padding metrics',      'Metrics<Int>',     '.zero'), 
        ('border',          'border metrics',       'Metrics<Int>',     '.zero'), 
        ('margin',          'margin metrics',       'Metrics<Int>',     '.zero'), 
        ('borderRadius',    'line-height',          'Int',              '0'), 
        ('crease',          'crease',               'Metrics<Bool>',    '.false'), 
        
        ('occlude',         'occlusion mode',       'Bool',             'false'), 
        
        ('wrap',            'line-wrapping mode',   'Bool',             'true'), 
        ('indent',          'indentation',          'Int',              '0'), 
        ('lineHeight',      'line-height',          'Int',              '0'), 
        
        ('font',            'font selection',       'FontSelection',    '.init(fontfile: "assets/fonts/default", size: 16)'),
        ('features',        'font feature list',    '[Feature]',        '[.kern(true)]'), 
        ('letterSpacing',   'letter spacing',       'Float',            '0'), 
        
        ('marginCollapse',  'margin collapse mode', 'Bool',             'true'),
        ('borderCollapse',  'border collapse mode', 'Bool',             'false'),
        ('grow',            'flex growth weight',   'Float',            '1'),
        ('stretch',         'flex stretch weight',  'Float',            '1'),
        
        ('position',        'positioning mode',     'Positioning',      '.relative'),
        ('justify',         'justification mode',   'Justification',    '.start'), 
        ('align',           'alignment mode',       'Alignment',        '.start'), 
        ('alignSelf',       'per-element alignment mode',  'Alignment', '.auto'), 
        ('axis',            'content major axis',   'Axis',             '.vertical')
    )
    }%
    enum Property 
    {
        % for property, prose, type, default in properties:
        case ${property}
        % end
        
        init?(_ string:String) 
        {
            switch string 
            {
            % for property, prose, type, default in properties:
            case ${'"{0}"'.format(css_name(property))}:
                self = .${property}
            % end
            default:
                return nil 
            }
        }
        
        var prosaicDescription:String 
        {
            switch self 
            {
            % for property, prose, type, default in properties:
            case .${property}:
                return ${'"{0}"'.format(prose)}
            % end
            }
        }
    }
    struct Rules:CustomStringConvertible
    {
        private 
        var properties:[Property: Any] = [:]
        
        % for property, prose, type, default in properties:
        var ${property}:${type} 
        {
            get 
            {
                self.properties[.${property}] as? ${type} ?? ${default} 
            }
            set(${property})
            {
                self.properties[.${property}] = ${property}
            }
        }
        mutating 
        func set(${property}:${type}?)
        {
            self.properties[.${property}] = ${property}
        }
        % end
        
        init() 
        {
            self.properties = [:]
        }
        
        init(_ properties:[Property: Any]) 
        {
            // check types 
            var checked:[Property: Any] = properties
            for (property, value):(Property, Any) in properties 
            {
                switch property 
                {
                % for property, prose, type, default in properties:
                case .${property}:
                    guard value is ${type} 
                    else 
                    {
                        Log.error("value of incorrect type '\(type(of: value))' evaded validation checks for initialization of property '\(property)' (expected \(${type}.self))")
                        checked[.${property}] = nil 
                        break 
                    }
                % end
                }
            }
            
            self.properties = properties
        }
        
        mutating 
        func overlay(with other:Self) 
        {
            self.properties.merge(other.properties)
            { 
                (_, new) in 
                new 
            }
        }
        func overlaid(with other:Self) -> Self
        {
            return .init(self.properties.merging(other.properties)
            { 
                (_, new) in 
                new 
            })
        }
        
        var description:String 
        {
            "{\n\(self.properties.map{ "    \($0.0): \($0.1)" }.joined(separator: "\n"))\n}"
        }
    }
}

extension UI.Style.Metrics where T:Numeric 
{
    static 
    var zero:Self 
    {
        .init(0)
    }
}
extension UI.Style.Metrics where T == Bool  
{
    static 
    var `false`:Self 
    {
        .init(false)
    }
}
